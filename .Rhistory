set.seed(2018)
A=matrix(runif(16,0,10), ncol=4); A = (A + t(A))/2
B=matrix(runif(16,0,10), ncol=4); B = (B + t(B))/2
x = 5
n = 100
Tayler_sum = 0
for (i in 0:n){
Tayler_sum = Tayler_sum+x^i
}
round(Tayler_sum,3)
round(1/(1-x),3)
# Consider any number in (-1,1).
x = 0.5
n = 100
Tayler_sum = 0
for (i in 0:n){
Tayler_sum = Tayler_sum + x^i
}
round(Tayler_sum,3)
round(1/(1-x),3)
round(Tayler_sum,3)
round(1/(1-x),3)
### Create a function
```{r}
check_conv <- function(x,n){
Tayler_sum_series = NULL; err_set = NULL
Tayler_sum = 1
for (i in 1:n){
Tayler_sum = Tayler_sum + x^i
err = abs(1/(1-x) - Tayler_sum)
Tayler_sum_series = c(Tayler_sum_series,Tayler_sum)
err_set = c(err_set, err)
}
return(list(Tayler_sum_series = Tayler_sum_series, err_set = err_set))
}
check_conv <- function(x,n){
Tayler_sum_series = NULL; err_set = NULL
Tayler_sum = 1
for (i in 1:n){
Tayler_sum = Tayler_sum + x^i
err = abs(1/(1-x) - Tayler_sum)
Tayler_sum_series = c(Tayler_sum_series,Tayler_sum)
err_set = c(err_set, err)
}
return(list(Tayler_sum_series = Tayler_sum_series, err_set = err_set))
}
### Create a function
```{r}
check_conv <- function(x,n){
Tayler_sum_series = NULL; err_set = NULL
Tayler_sum = 1
for (i in 1:n){
Tayler_sum = Tayler_sum + x^i
err = abs(1/(1-x) - Tayler_sum)
Tayler_sum_series = c(Tayler_sum_series,Tayler_sum)
err_set = c(err_set, err)
}
return(list(Tayler_sum_series = Tayler_sum_series, err_set = err_set))
}
```
check_conv <- function(x,n){
Tayler_sum_series = NULL; err_set = NULL
Tayler_sum = 1
for (i in 1:n){
Tayler_sum = Tayler_sum + x^i
err = abs(1/(1-x) - Tayler_sum)
Tayler_sum_series = c(Tayler_sum_series,Tayler_sum)
err_set = c(err_set, err)
}
return(list(Tayler_sum_series = Tayler_sum_series, err_set = err_set))
}
# Run the function "check_conv"
x = 0.8
n = 100
result = check_conv(x,n)
summary(result)
result$Tayler_sum_series
set.seed(2018)
result$Tayler_sum_series
result$err_set
result$Tayler_sum_series[96:100]
round(result$err_set[96,100],3)
round(result$err_set[96:100],3)
errs = result$err_set
plot(1:length(errs), errs, type="b", col="blue", main="Tayler series errors", xlims=c(1,50))
plot(1:length(errs), errs, type="b", col="blue", main="Tayler series errors", xlim=c(1,50))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
plot(1:length(errs), errs, type="b", col="blue", main="Tayler series errors", xlim=c(1,50))
x = 0.2
# initial setting
Tayler_sum = 1; err = 100; i = 0; err_set = NULL
while(err >= 10^(-7)){
i = i+1
Tayler_sum = Tayler_sum + x^i
err = abs(1/(1-x) - Tayler_sum)
err_set = c(err_set, err)
}
length(err_set)
err_set
x = 0.7
# initial setting
Taylor_sum = 0; err = 100; i = 0; err_set = NULL
while(err >= 10^(-10)){
i = i + 1
Taylor_sum = Taylor_sum + (-1)^(i+1) * x^(2*i-1) / factorial(2*i-1)
err = abs(sin(x) = Taylor_sum)
err_set = c(err_set,err)
}
while(err >= 10^(-10)){
i = i + 1
Taylor_sum = Taylor_sum + (-1)^(i+1) * x^(2*i-1) / factorial(2*i-1)
err = abs(sin(x) - Taylor_sum)
err_set = c(err_set,err)
}
# The number of required iterations
i
# Error set
err_set
# use "if" function
x = 0.7
Taylor_sum = 0; err_set = NULL
for(i in 1:10000){
Taylor_sum = Taylor_sum + Taylor_sum + (-1)^(i+1) * x^(2*i-1) / factorial(2*i-1)
err = abs(sin(x) - Taylor_sum)
err_set = c(err_set,err)
if (err < 10^(-10)){
break
} else if (err >= 10^(-10) & err < 10^(-5)){
print("Almost done!")
} else {
print("More iterate!")
}
}
for(i in 1:10000){
Taylor_sum = Taylor_sum + Taylor_sum + (-1)^(i+1) * x^(2*i-1) / factorial(2*i-1)
err = abs(sin(x) - Taylor_sum)
err_set = c(err_set,err)
if (err < 10^(-10)){
break
} else if (err => 10^(-10) & err < 10^(-5)){
print("Almost done!")
} else {
print("More iterate!")
}
}
# use "if" function
x = 0.7
Taylor_sum = 0; err_set = NULL
for(i in 1:10000){
Taylor_sum = Taylor_sum + Taylor_sum + (-1)^(i+1) * x^(2*i-1) / factorial(2*i-1)
err = abs(sin(x) - Taylor_sum)
err_set = c(err_set,err)
if (err < 10^(-10)){
break
} else if (10^(-10) <= err & err < 10^(-5)){
print("Almost done!")
} else {
print("More iterate!")
}
}
# use "if" function
x = 0.7
Taylor_sum = 0; err_set = NULL
for(i in 1:10000){
Taylor_sum = Taylor_sum + (-1)^(i+1) * x^(2*i-1) / factorial(2*i-1)
err = abs(sin(x) - Taylor_sum)
err_set = c(err_set,err)
if (err < 10^(-10)){
break
} else if (10^(-10) <= err & err < 10^(-5)){
print("Almost done!")
} else {
print("More iterate!")
}
}
# use "if" function
x = 0.7
Taylor_sum = 0; err_set = NULL
for(i in 1:10000){
Taylor_sum = Taylor_sum + (-1)^(i+1) * x^(2*i-1) / factorial(2*i-1)
err = abs(sin(x) - Taylor_sum)
err_set = c(err_set,err)
if (err < 10^(-10)){
break
} else if (err >= 10^(-10) & err < 10^(-5)){
print("Almost done!")
} else {
print("More iterate!")
}
}
# The number of required iterations
i
err_set
# Save "i" and "err_set"
save(i, err_set, file="your_name_ID_exercise1")
# Load the saved data file
load("your_name_ID_exercise1")
